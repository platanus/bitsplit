FORMAT: 1A
HOST: http://localhost:5000/api/

# Bitsplit


## Sessions [/v1/sessions]

### Create new session [POST]

+ Request (application/json)

        {
            "user": {
                "email": "example@example.com",
                "password": "bestPa55W0rd3ver"
            }
        }

+ Response 200 (application/json)

        {
            "authentication_token": "smnozAAbYnEX2xVRfS5R"
        }
        
### Delete session [DELETE]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
            
+ Response 204

        
## Users [/v1/users]

### Get current user [GET]


+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R

            
+ Response 200 (application/json)
        
    Si el usuario no se ha autenticado con Splitwise, entonces `picture_url` será `null`

    + Body

            {
                 "data": {
                     "id": "1",
                     "type": "user",
                     "attributes": {
                         "email": "example@gmail.com",
                         "name": "example",
                         "last_name": "example",
                         "birth_date": "10/04/1999",
                         "picture": "https://www.theBestImgHostingSite.com/profile.jpeg",
                         "api_key": "th3b3stAP1K3Y",
                         "picture_url": {
                            "small": "https://www.theBestImgHostingSite.com/small-img.jpeg",
                            "medium": "https://www.theBestImgHostingSite.com/medium-img.jpeg",
                            "large": "https://www.theBestImgHostingSite.com/large-img.jpeg"
                         },
                        "wallet": "bitsplit"
                     }
                 }
             }
        


### Create a new user [POST]

+ Request (application/json)

        {
            "email": "example@example.com",
            "password": "bestPa55W0rd3ver",
            "password_confirmation": "bestPa55W0rd3ver",
            "api_key": "th3b3stAP1K3Y",
            "api_secret": "th3B3s1S3Cr31"
            "name": "example",
            "last_name": "example",
            "birth_date": "10/04/1999",
            "picture": "https://www.theBestImgHostingSite.com/profile.jpeg",
        }

+ Response 201 (application/json)

        {
             "data": {
                 "id": "1",
                 "type": "user",
                 "attributes": {
                     "email": "example@gmail.com",
                     "name": "example",
                     "last_name": "example",
                     "birth_date": "10/04/1999",
                     "picture": "https://www.theBestImgHostingSite.com/profile.jpeg",
                     "api_key": "th3b3stAP1K3Y",
                 }
             }
         }


### Update existing user [PATCH]
+ Request (application/json)
The `password` field is only required if the `api_key` or `api_secret` fields are being updated.

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
            
    + Body

            {
                "email": "new_example@example.com",
                "password": "bestPa55W0rd3ver",
                "api_key": "th3b3stAP1K3Y_v2",
                "api_secret": "th3B3s1S3Cr31"
                "name": "example",
                "last_name": "example",
                "birth_date": "10/04/1999",
                "picture": "https://www.theBestImgHostingSite.com/profile.jpeg",
            }
            
+ Response 200 (application/json)

        {
             "data": {
                 "id": "1",
                 "type": "user",
                 "attributes": {
                    "name": "example",
                    "last_name": "example",
                     "birth_date": "10/04/1999",
                     "picture": "https://www.theBestImgHostingSite.com/profile.jpeg",
                     "email": "new_example@gmail.com",
                     "api_key": "th3b3stAP1K3Y_v2",
                 }
             }
         }
        
        
### Delete an existing user [DELETE]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
            
    + Body

            {
                "email": "example@example.com",
                "password": "bestPa55W0rd3ver"
            }
        
        
+ Response 204 (application/json)

        
## Quotations [/v1/quotations]
### Create new quotation [POST]



+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R

    + Body

            {
                "amount": 1000
            }


+ Response 200 (application/json)

        {
            "data": {
                "quotation": {
                    "amount_clp": [
                      "1004.09",
                      "CLP"
                    ],
                    "amount_btc": [
                    "0.00016961",
                    "BTC"
                    ]
                }
            }
        }

## Balances [/v1/balances]
### Get balance [GET]



+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R



+ Response 200 (application/json)
    
    >>`amount`: Cantidad total asociada a la cuenta
    >`available_amount`: Cantidad total asociada a la cuenta
    >`frozen_amount`: Cantidad retenida en órdenes pendientes
    >`pending_withdraw_amount`: Cantidad retenida en proceso de retiro

    + body

            { 
                "data": {
                    "balance": {
                        "CLP": {
                            "amount": "0.0",
                            "available_amount": "0.0",
                            "frozen_amount": "0.0",
                            "pending_withdraw_amount": "0.0"
                        },
                        "BTC": {
                            "amount": "0.0",
                            "available_amount": "0.0",
                            "frozen_amount": "0.0",
                            "pending_withdraw_amount": "0.0"
                        }
                    }
                }
            }


## Payments [/v1/payments]
### Create new payment [POST]


+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R

    + Body

            {
                "payment_amount": 0.00227014,
                "receiver_email": receiver_example@example.com
            }


+ Response 200 (application/json)


        {
            "data": {
                "id": "1",
                "type": "payment",
                "attributes": {
                    "sender_email": "example1@example.com",
                    "receiver_email": "example2@example.com",
                    "amount": 0.0028859014,
                    "completed": true,
                    "invoice_id": 850,
                    "created_at": "2020-04-21T22:16:59.731Z"
                }
            }
        }
        
        
### Get payments record [GET]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R

            
+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "2",
                    "type": "payment",
                    "attributes": {
                        "sender_email": "example0@example.com",
                        "receiver_email": "example1@example.com",
                        "amount": 0.00227014,
                        "completed": true,
                        "invoice_id": 848,
                        "created_at": "2020-04-21T21:47:42.915Z"
                    }
                },
                {
                    "id": "1",
                    "type": "payment",
                    "attributes": {
                        "sender_email": "example1@example.com",
                        "receiver_email": "example0@example.com",
                        "amount": 0.00238859014,
                        "completed": true,
                        "invoice_id": 847,
                        "created_at": "2020-04-21T21:47:15.549Z"
                    }
                },
                {
                    "id": "3",
                    "type": "payment",
                    "attributes": {
                        "sender_email": "example1@example.com",
                        "receiver_email": "example0@example.com",
                        "amount": 0.00288859014,
                        "completed": true,
                        "invoice_id": 849,
                        "created_at": "2020-04-21T21:51:49.047Z"
                    }
                }
            ]
        }
                

        

## Splitwise API connection [/v1/splitwise/authentications]
### Create new url for api connection [POST]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
            
+ Response 200 (application/json)

        {
            "data": {
                "type": "splitwise",
                "attributes": {
                    "authorize_url": "https://secure.splitwise.com/authorize?oauth_token=th3B3s10Au1hT0k3n"
                }
            }
        }
        
## Splitwise debts [/v1/splitwise/debts]

### Pay off user debt [POST]
+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R

    + Body

            {
                "group_id": 1298371,
                "to_user_id": 541423,
                "amount_clp": 750000,
                "amount_btc": 0.1
            }
            
+ Response 200

### Get user splitwise debts [GET]
+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R

+ Response 200 (application/json)
    >>`user_to_friends`: Lista de las deudas que tiene el usuario con sus amigos.
    >`friends_to_user`: Lista de las deudas que los amigos tienen con el usuario.
    >`is_payable`: true si los dos usuarios tienen cuenta en Bitsplit; false sino.
    >`"group_name": "Gastos sin grupo"`: son los gastos que se le hacen directamente a una persona (sin grupo). El id del grupo siempre es 0.


    + body

            {
                "data": {
                    "type": "debts",
                    "attributes": {
                        "user_to_friends": [
                            {
                                "to": {
                                    "id": 25417511,
                                    "first_name": "Example1",
                                    "last_name": "Example1",
                                    "picture": "https://s3.amazonaws.com/splitwise/uploads/user/default_avatars/avatar-blue6-50px.png",
                                    "email": "example1@gmail.com"
                                },
                                "from": {
                                    "id": 31015523,
                                    "first_name": "Example",
                                    "last_name": "Example",
                                    "picture": "https://splitwise.s3.amazonaws.com/uploads/user/avatar/31015523/small_503df34f-b77d-447c-b259-c62e7c216097.jpeg",
                                    "email": "example@example.com"
                                },
                                "amount": "317.5",
                                "currency_code": "CLP",
                                "group_id": 17800816,
                                "group_name": "Grupo1",
                                "is_payable": false
                            }
                        ],
                        "friends_to_user": [
                            {
                                "from": {
                                    "id": 25417511,
                                    "first_name": "Example1",
                                    "last_name": "Example1",
                                    "picture": "https://s3.amazonaws.com/splitwise/uploads/user/default_avatars/avatar-blue6-50px.png",
                                    "email": "example1@gmail.com"},
                                "to": {
                                    "id": 31015523,
                                    "first_name": "Example",
                                    "last_name": "Example",
                                    "picture": "https://splitwise.s3.amazonaws.com/uploads/user/avatar/31015523/small_503df34f-b77d-447c-b259-c62e7c216097.jpeg",
                                    "email": "example@example.com"
                                },
                                "amount": "750.0",
                                "currency_code": "CLP",
                                "group_id": 0,
                                "group_name": "Gastos sin grupo",
                                "is_payable": true
                            },
                            {
                                "from": {
                                    "id": 6387905,
                                    "first_name": "Example2",
                                    "last_name": "Example2",
                                    "picture": "https://splitwise.s3.amazonaws.com/uploads/user/avatar/6387905/small_b6b0e868-ecb4-485a-a396-a360e7a763d8.jpeg",
                                    "email": "example2@gmail.com"
                                },
                                "to": {
                                    "id": 31015523,
                                    "first_name": "Example",
                                    "last_name": "Example",
                                    "picture": "https://splitwise.s3.amazonaws.com/uploads/user/avatar/31015523/small_503df34f-b77d-447c-b259-c62e7c216097.jpeg",
                                    "email": "example@example.com"
                                },
                                "amount": "1750.0",
                                "currency_code": "CLP",
                                "group_id": 19105164,
                                "group_name": "Grupo2",
                                "is_payable": false
                            }
                        ]
                    }
                }
            }
        
## Firebase [/v1/firebase]
### Update notification seen status [PATCH]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
    + Body

            {
                "notification_token": "-M5y4cigQLy2bwsrSFh2"
            }
            
+ Response 200


## OpenNode Deposit [/v2/deposits]
### Create OpenNode Charge [POST]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
    + Body

            {
                "amount": 0.002,
                "currency": "BTC"
            }
            
+ Response 200 (application/json)

        {
        "data": {
            "response": {
                "id": "f485e58f-8fa9-4e9e-a608-9f78caba3129",
                "name": null,
                "description": "N/A",
                "created_at": 1589572945,
                "status": "unpaid",
                "callback_url": null,
                "success_url": "https://www.opennode.com",
                "order_id": "N/A",
                "notes": "",
                "currency": "CLP",
                "source_fiat_value": 200,
                "fiat_value": 200,
                "auto_settle": false,
                "notif_email": null,
                "lightning_invoice": {
                    "expires_at": 1589576545,
                    "payreq": "LNBC25940N1P0TAA23PP56MCL7UTKYDM2HUJE47SUQWXX7YRE3DGYJK5WRCPW80LZPWGHPHHQDQ9FCH5ZCQZPG8XT8K4S3682JMX0VNS2G3V62L367GALTAZLX6TTMFDPMJ9K7S0HHGM2MWNZK7Z7YFLVJVWWDF6TX3GQFKFD7N2TXX5S2LZVCCPN2AEQQ89WRDD"
                },
                "chain_invoice": {
                    "address": "3LUvbCKZfAHGQzZM95cDFGeHrJ1ecqtj9F"
                },
                "address": "3LUvbCKZfAHGQzZM95cDFGeHrJ1ecqtj9F",
                "amount": 2594,
                "uri": "bitcoin:3LUvbCKZfAHGQzZM95cDFGeHrJ1ecqtj9F?amount=0.00002594&label=N/A&lightning=LNBC25940N1P0TAA23PP56MCL7UTKYDM2HUJE47SUQWXX7YRE3DGYJK5WRCPW80LZPWGHPHHQDQ9FCH5ZCQZPG8XT8K4S3682JMX0VNS2G3V62L367GALTAZLX6TTMFDPMJ9K7S0HHGM2MWNZK7Z7YFLVJVWWDF6TX3GQFKFD7N2TXX5S2LZVCCPN2AEQQ89WRDD"
                        }
                }
        }


## OpenNode Withdrawal [/v2/withdrawals]
### Create OpenNode Withdrawal [POST]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
    + Body

            {
                "invoice": "LNBC25940N1P0TAA23PP56MCL7UTKYDM2HUJE47SUQWXX7YRE3DGYJK5WRCPW80LZPWGHPHHQDQ9FCH5ZCQZPG8XT8K4S3682JMX0VNS2G3V62L367GALTAZLX6TTMFDPMJ9K7S0HHGM2MWNZK7Z7YFLVJVWWDF6TX3GQFKFD7N2TXX5S2LZVCCPN2AEQQ89WR"
            }
            
+ Response 200 (application/json)

        {
            "data": {
                "response": {
                        "id": "3f50999e-f21f-4981-b67c-ea9c075be7d6",
                        "type": "ln",
                        "amount": 10,
                        "reference": "lntb100n1pw0fl34pp5p8u6alsp6vr7ngevp82lu6kz7j4ryla0dgpg9es0jq70shs39xzsdqqcqzpgxqyz5vqm5egyvdadnnvrecqdzamwl6guhhvkpja0s9e0vu6g0ay75kegzfnhjykdveagfj8rt9nay0yvu8j94shsvj3ghxu306y2pac02nq85qq7m8tsc",
                        "fee": 0,
                        "status": "pending",
                        "processed_at": 1559559748
                    }
                }
        }
        
## Transfer [/v2/transfers]
 > Transferir bitcoins de un usuario de Bitsplit a otro usuario con su cuenta de BitSplit o Buda
 >> (Antes, poner las credenciales de Open node en .env.local y hacer data:migrate)
 
### Create Transfer [POST]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
            
    + Body

            {
                "receiver_email": "example1@example.com",
                "amount": 0.00001,
                "wallet_origin": "bitsplit"
            }
            
+ Response 200 (application/json)

+ Response 400 (application/json)

## Balances V2 [/v2/balances]
### Get balance [GET]



+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R



+ Response 200 (application/json)
    >>`BTC_CLP`: Es el saldo de BTC en su equivalente en CLP
    >`amount`: Cantidad total asociada a la cuenta
    >`available_amount`: Cantidad total asociada a la cuenta
    >`frozen_amount`: Cantidad retenida en órdenes pendientes
    >`pending_withdraw_amount`: Cantidad retenida en proceso de retiro


    + body

            { 
                "data": {
                    "balance": {
                        "buda": {
                            "CLP": {
                                "amount": "0.0",
                                "available_amount": "0.0",
                                "frozen_amount": "0.0",
                                "pending_withdraw_amount": "0.0"
                            },
                            "BTC": {
                                "amount": "0.0",
                                "available_amount": "0.0",
                                "frozen_amount": "0.0",
                                "pending_withdraw_amount": "0.0"
                            }, 
                            "BTC_CLP": {
                                "amount": "0.0",
                                "available_amount": "0.0",
                                "frozen_amount": "0.0",
                                "pending_withdraw_amount": "0.0"
                            }
                        },
                        "bitsplit": {
                            "BTC": {
                                "amount": "0.001555"
                            },
                            "BTC_CLP": {
                                "amount": "11665.547489"
                            }
                        }
                    }
                }
            }
            
## Transactions V2 [/v2/transactions]
### Get transactions [GET]


+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R



+ Response 200 (application/json)
    > * Si el usuario no tiene su cuenta asociada con Splitwise su nombre, apellido y foto se retornan vacíos.
    > * Si la transacción es de tipo Deposit o Withdrawal el sender y receiver es la misma persona
    
    + body

            {
                "data": {
                    "transactions": [
                        {
                            "id": 21,
                            "type": "Transfer",
                            "attributes": {
                                "created_at": "2020-06-03T00:18:19.620Z",
                                "amount_btc": 0.001555,
                                "amount_clp": 11641.4380537,
                                "sender": {
                                    "id": 1,
                                    "email": "example@example.com",
                                    "first_name": "Example",
                                    "last_name": "Example",
                                    "picture": "https://splitwise.s3.amazonaws.com/uploads/user/avatar/31015523/small_503df34f-b77d-447c-b259-c62e7c216097.jpeg"
                                },
                                "receiver": {
                                    "id": 3,
                                    "email": "example@example.com",
                                    "first_name": "",
                                    "last_name": "",
                                    "picture": ""
                                }
                            }
                        },
                        {
                            "id": 18,
                            "type": "Deposit",
                            "attributes": {
                                "created_at": "2020-06-02T22:51:56.966Z",
                                "amount_btc": 0.00155577,
                                "amount_clp": 11647.2026243118,
                                "sender": {
                                    "id": 1,
                                    "email": "example@example.com",
                                    "first_name": "Example",
                                    "last_name": "Example",
                                    "picture": "https://splitwise.s3.amazonaws.com/uploads/user/avatar/31015523/small_503df34f-b77d-447c-b259-c62e7c216097.jpeg"
                                },
                                "receiver": {
                                    "id": 1,
                                    "email": "example@example.com",
                                    "first_name": "Example",
                                    "last_name": "Example",
                                    "picture": "https://splitwise.s3.amazonaws.com/uploads/user/avatar/31015523/small_503df34f-b77d-447c-b259-c62e7c216097.jpeg"
                                }
                            }
                        }
                    ]
                }
            }

## Push Notifications [/v2/push_notifications]
### Add ExponentPushToken [POST]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
    + Body

            {
                "token": "ExponentPushToken[XMWAWhE2LvFtXlztMPkBL-]"
            }

+ Response 200 (application/json)

            {
                "message": "push notification token saved"
            }
            
+ Response 200 (application/json)

            {
                "message": "push notification token updated"
            }

+ Response 409 (application/json)

            {
                "message": "token already exists"
            }
            
## Buda pay [/v2/buda_pays]
### Pay invoice with Buda [POST]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
   
    + Body

            {
              "invoice": "LNBC20U1P0W5W6RPP5655R3A436CQ2H3756V2P3WZC7FM94MGF7R04TH4DWHK49FL0SZ7QDQ9FCH5ZCQZPGH4MTWS99Q372TTASXQVVXH2LZC83PHH4Q7WZ3WYQHM8LD84MD2SZYUSVQ8ZENXLCT57USFTWGN26L3VAP4TTPT8NXSEAKRL2397GYJGPLR8C6H", 
              "order_id": "51"
            }

+ Response 200 (application/json)

        {
            "data": {
                "type": "buda_pay",
                "attributes": {
                    "withdrawal": {
                        "id": 308797,
                        "state": "pending_preparation",
                        "currency": "BTC",
                        "created_at": "2020-06-17T15:48:40.379Z",
                        "withdrawal_data": {
                            "type": "lightning_network_withdrawal_data",
                            "payment_request": "LNBC20U1P0W5W6RPP5655R3A436CQ2H3756V2P3WZC7FM94MGF7R04TH4DWHK49FL0SZ7QDQ9FCH5ZCQZPGH4MTWS99Q372TTASXQVVXH2LZC83PHH4Q7WZ3WYQHM8LD84MD2SZYUSVQ8ZENXLCT57USFTWGN26L3VAP4TTPT8NXSEAKRL2397GYJGPLR8C6H",
                            "payment_error": null,
                            "total_fees": null
                        },
                        "forced_reason": null,
                        "account_id": 151392,
                        "user_id": 151392,
                        "expected_execution_time": null,
                        "expected_arrival_time": null,
                        "amount": [
                            "0.00002",
                            "BTC"
                        ],
                        "fee": [
                            "0.0",
                            "BTC"
                        ],
                        "usd_amount": [
                            "0.19",
                            "USD"
                        ]
                    }
                }
            }
        }
            

+ Response 400 (application/json)

            {
                "message": "user does not have synchronized Buda"
            }


## Buda Withdrawal [/v2/buda_withdrawals]
### Make direct withdrawal to Buda [POST]

+ Request (application/json)

    + Headers

            X-User-Email: example@example.com
            X-User-Token: smnozAAbYnEX2xVRfS5R
   
    + Body

            {
                "amount": 0.000001
            }

+ Response 200 (application/json)

        {
            "data": {
                "id": "1a8a625f-7c3e-41d7-8b90-d71f9e18dc5c",
                "type": "ln",
                "amount": 100,
                "reference": "lnbc1u1p00dd9hpp5sd7hsg2gvercz3pdyquem95g729vwhneqevlcrrllq35e83ag85qdqqcqzpg7pngu4epz4upcmhefthq57fnr6e554kcnurzqvgeydcuwxvjfytx9s3nuqwl836r4u23jfk6zaw7hygdjazkyjnexuhh2m43wl47fgsp9u08f8",
                "fee": 0,
                "status": "pending",
                "processed_at": 1593226424
            }
        }
            

+ Response 400 (application/json)

            { "error": "example error message" 
            }

## Reset Password [/v2/reset_passwords]
### User forgot password [POST]

+ Request (application/json)

    + Headers


    + Body

            {
                "email": "example@example.cl" 
            }

+ Response 200 (application/json)

            {
                "data": {
                    "type": "reset_password",
                    "attributes": {
                        "token": "16f6fc2d9a73a1a03cae953d137225a4d9880093b337fe4311455bc20dbbf9c7"
                    }
                }
            }
            

+ Response 404 (application/json)


### Reset user password [PUT]

+ Request (application/json)

    + Headers


    + Body

            {
                "token": "16f6fc2d9a73a1a03cae953d137225a4d9880093b337fe4311455bc20dbbf9c7",
                "password": "123456789"
            }

+ Response 200 (application/json)

        {
            "data": {
                "type": "reset_password",
                "attributes": {
                    "email": "example@example.cl",
                    "password": "123456789"
                }
            }
        }
            

+ Response 404 (application/json)